/*
    Repr√©sente le monde de la Plaine Champignon, temp√©r√©, adapt√© aux cultures classiques.
    H√©rite de la classe Monde et initialise ses caract√©ristiques propres.
*/
public class PlaineChampignon : Monde
{
    /*
        Constructeur de la classe Plaine Champignon.
        Initialise le sol, les plantes et les m√©t√©os typiques du monde.
    */
    public PlaineChampignon(string unNom = "Plaine Champignon") : base(unNom)
    {
        // Sol disponible
        this.typesSolsDisponibles.Add(TypeSol.Humifere);

        // Plantes disponibles
        this.typesPlanteDisponibles.Add(TypePlante.Tomate);
        this.typesPlanteDisponibles.Add(TypePlante.Fraise);
        this.typesPlanteDisponibles.Add(TypePlante.Champignon);
        this.typesPlanteDisponibles.Add(TypePlante.Marguerite);

        // M√©t√©os possibles
        this.meteosPossibles.Add(new Meteo(18, 60, 20)); // M√©t√©o douce
        this.meteosPossibles.Add(new Meteo(20, 70, 10)); // Journ√©e ensoleill√©e
        this.meteosPossibles.Add(new Meteo(15, 50, 40)); // Pluie l√©g√®re
        this.meteosPossibles.Add(new Meteo(22, 80, 5));  // Beau temps
        this.meteosPossibles.Add(new Meteo(12, 30, 60)); // Fortes pluies

        this.meteoPrevisionnelle = this.meteosPossibles[0]; // Par d√©faut, la m√©t√©o de d√©part du monde correspond √† la m√©t√©o la plus simple.

        // Initialisation de l'illustration du monde.
        this.InitialiserIllustration();
    }

    /*
        Affiche une description d√©taill√©e du monde Plaine Champignon.
        Liste les caract√©ristiques : temp√©rature, m√©t√©o et plantes disponibles.
    */
    public override void AfficherDescription()
    {
        Console.WriteLine($"Monde 1 ‚Äî {this.nom}\n");

        Console.WriteLine($"Bienvenue dans {this.nom}, un monde doux et paisible o√π tout pousse... sauf quand un Goombavers passe par l√† !\n");

        Console.WriteLine("Caract√©ristiques :\n");
        Console.WriteLine("   - Temp√©rature : 10¬∞C √† 25¬∞C (temp√©r√©)");
        Console.WriteLine("   - M√©t√©o : alternance pluie / soleil");
        Console.WriteLine("   - Plantes : Tomate, Fraise, Marguerite, Champignon\n");
    }

    /*
        Initialiser une illustration ASCII repr√©sentant la Plaine Champignon.
    */
    public override void InitialiserIllustration()
    {
        this.Illustration = "                 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚°§‚†§‚¢§‚£Ä‚°Ä\n";
        this.Illustration += "                 ‚†Ä‚†Ä‚†Ä‚¢Ä‚°§‚†ö‚†â‚†ë‚£Ä‚†î‚†ê‚†¢‚†Ä‚†à‚°π‚†∂‚£Ñ\n";
        this.Illustration += "                 ‚†Ä‚†Ä‚°∞‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚°è‚¢Ñ‚£Ä‚°∞‚¢†‚†ä‚†Ä‚†Ä‚†à‚†≥‚°Ñ\n";
        this.Illustration += "                 ‚†Ä‚£∏‚£Ö‚°Ä‚†Ä‚†Ä‚£Ä‚†î‚†Ä‚¢Ä‚°Ä‚†Ä‚†∏‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ñ\n";
        this.Illustration += "                 ‚¢Ä‚£ø‚£ø‚£æ‚°≠‚°≠‚†ê‚¢¢‚†ä‚†Å‚†à‚¢£‚†Ä‚†ô‚†¢‚¢Ñ‚£†‚£¥‚£ø‚£∑\n";
        this.Illustration += "                 ‚¢∏‚†Å‚†Ä‚†à‚†π‚£ø‚£∂‚£º‚£Ü‚£Ä‚£Ä‚£º‚£†‚£§‚£æ‚£ø‚†ü‚†â‚†ô‚¢ø\n";
        this.Illustration += "                 ‚†à‚¢ß‚°Ä‚†Ä‚£†‚£ø‚°ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚£ø‚£ø‚°Ä‚†Ä‚£Ä‚†û\n";
        this.Illustration += "                 ‚†Ä‚†Ä‚†à‚†â‚¢©‚†É‚†Ä‚¢Ä‚£§‚†Ä‚†Ä‚¢†‚£¶‚†Ä‚†Ä‚¢∏‚†â‚†â\n";
        this.Illustration += "                 ‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†â‚°Ä‚†Ä‚¢à‚†Å‚†Ä‚†Ä‚¢∏\n";
        this.Illustration += "                 ‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£Ü‚†Ä‚†Ä‚†Ä‚†â‚†Ç‚†Å‚†Ä‚†Ä‚¢Ä‚°º\n";
        this.Illustration += "                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â\n";
    }

    /*
        G√®re une urgence sp√©cifique √† la Plaine Champignon : Goombaver, Koopascargot, ou PuceronKoopa.
    */
    public override void LancerUrgence(Terrain terrain1, Terrain terrain2)
    {
        int tirage = new Random().Next(3);

        switch (tirage)
        {
            case 0:
                this.GererGoombaver(terrain1, terrain2);
                break;
            case 1:
                this.GererKoopascargot(terrain1, terrain2);
                break;
            case 2:
                this.GererPuceronKoopa(terrain1, terrain2);
                break;
        }

        Thread.Sleep(2000);
        Console.WriteLine("\nL'urgence est termin√©e. Retour √† la culture !\n");
        Simulation.AttendreUtilisateurPourContinuer();
    }

    /*
        Le PuceronKoopa s'attaque √† une plante adulte et d√©truit sa production.
    */
    private void GererPuceronKoopa(Terrain terrain1, Terrain terrain2)
    {

    }

    /*
        Le Koopascargot se d√©place lentement sur une plante et ralentit sa croissance.
    */
    private void GererKoopascargot(Terrain terrain1, Terrain terrain2)
    {

    }

    /*
        G√®re une attaque de Goombaver sur un des terrains.
        Le Goombaver ne sort que s‚Äôil y a une plante, puis cible une plante al√©atoirement.
        Le joueur dispose de 3 tentatives pour repousser l'intrus, sinon la plante cibl√©e est mang√©e.
    */
    private void GererGoombaver(Terrain terrain1, Terrain terrain2)
    {
        // Les plantes des terrains 1 et 2 sont rassembl√©es dans une m√™me liste.
        List<Plante> toutesLesPlantes = [.. terrain1.Plantes, .. terrain2.Plantes];

        // L'intrus n'agit pas si aucune plante n'est plant√©e.
        if (toutesLesPlantes.Count == 0)
        {
            Console.WriteLine("üêõ Un Goombaver rode... mais ne trouve aucune plante. Il s‚Äôenfuit !");
            return;
        }

        // D√©finition de la plante cibl√©e par l'intrus.
        Plante cible = toutesLesPlantes[new Random().Next(toutesLesPlantes.Count)];
        Terrain terrainCible = terrain1.Plantes.Contains(cible) ? terrain1 : terrain2;

        // Affichage anim√© de l'intrus.
        Console.Clear();
        Console.WriteLine("Le sol tremble doucement sous vos pieds...");
        Thread.Sleep(2000);
        Console.WriteLine("Un Goombaver surgit du sous-sol !\n");
        Thread.Sleep(2000);
        Console.WriteLine($"Il fonce vers votre plante {cible.Symbole} en ({cible.X + 1}, {cible.Y + 1}) !");

        int essaisRestants = 3;
        bool repousse = false;

        while (essaisRestants > 0 && !repousse)
        {
            Console.WriteLine($"\nQue faire ? (Actions restantes : {essaisRestants}/8)\n");
            Console.WriteLine("1. Frapper le sol (succ√®s : 70%)");
            Console.WriteLine("2. Vaporiser un jet d'eau (succ√®s : 60%)");
            Console.WriteLine("3. Allumer un r√©pulsif sonore (succ√®s : 80%)");
            Console.WriteLine("4. Ne rien faire\n");

            Console.Write("Entrez le num√©ro de l'action que vous souhaitez r√©aliser : ");
            string choix = Console.ReadLine()!;
            double tirage = new Random().NextDouble();

            switch (choix)
            {
                case "1":
                    Console.WriteLine("\n=> Vous frappez le sol avec puissance !");
                    repousse = tirage < 0.7;
                    break;
                case "2":
                    Console.WriteLine("\n=> Vous aspergez la zone d‚Äôeau !");
                    repousse = tirage < 0.6;
                    break;
                case "3":
                    Console.WriteLine("\n=> Vous activez un r√©pulsif sonore !");
                    repousse = tirage < 0.8;
                    break;
                default:
                    Console.WriteLine("\n=> Vous ne faites rien...Original comme choix...");
                    essaisRestants = 0;
                    break;
            }

            essaisRestants--;

            if (repousse)
            {
                Console.WriteLine("\nLe Goombaver est effray√© et d√©tale sous terre !");
                return;
            }

            if (essaisRestants > 0 && !repousse)
                Console.WriteLine("\nLe Goombaver h√©site mais reste mena√ßant...");
        }

        // Le joueur n'est pas parvenu √† se d√©barraser de l'intrus : la plante est perdue.
        Console.WriteLine($"\n√âchec ! Le Goombaver a d√©vor√© votre {cible.Symbole} en ({cible.X + 1}, {cible.Y + 1}) !");
        terrainCible.Emplacements[cible.X, cible.Y] = null;
        terrainCible.Plantes.Remove(cible);
    }
}

